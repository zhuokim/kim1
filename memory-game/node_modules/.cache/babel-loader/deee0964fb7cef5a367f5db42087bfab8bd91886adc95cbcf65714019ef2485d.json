{"ast":null,"code":"// 定义所有可用的单词对\nexport const allWords=[{english:\"Charge\",chinese:\"电荷\"},{english:\"Electron\",chinese:\"电子\"},{english:\"Battery\",chinese:\"电池\"},{english:\"Circuit\",chinese:\"电路\"},{english:\"Current\",chinese:\"电流\"},{english:\"Voltage\",chinese:\"电压\"},{english:\"Ammeter\",chinese:\"电流表\"},{english:\"Voltmeter\",chinese:\"电压表\"},{english:\"Switch\",chinese:\"开关\"},{english:\"Load\",chinese:\"负载\"},{english:\"Resistance\",chinese:\"电阻\"},{english:\"Conductor\",chinese:\"导体\"},{english:\"Insulator\",chinese:\"绝缘体\"}];// 使用 Fisher-Yates 洗牌算法进行随机抽取\nconst shuffleArray=array=>{const shuffled=[...array];for(let i=shuffled.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffled[i],shuffled[j]]=[shuffled[j],shuffled[i]];}return shuffled;};export const getRandomWords=function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:8;// 确保不要求超过可用单词数量\nconst safeCount=Math.min(count,allWords.length);// 使用 Fisher-Yates 洗牌算法随机打乱并取前 count 个\nreturn shuffleArray(allWords).slice(0,safeCount);};","map":{"version":3,"names":["allWords","english","chinese","shuffleArray","array","shuffled","i","length","j","Math","floor","random","getRandomWords","count","arguments","undefined","safeCount","min","slice"],"sources":["/Users/jz/Documents/resistance-begingame/memory-game/src/data/words.ts"],"sourcesContent":["export interface WordPair {\n  english: string;\n  chinese: string;\n}\n\n// 定义所有可用的单词对\nexport const allWords: WordPair[] = [\n  { english: \"Charge\", chinese: \"电荷\" },\n  { english: \"Electron\", chinese: \"电子\" },\n  { english: \"Battery\", chinese: \"电池\" },\n  { english: \"Circuit\", chinese: \"电路\" },\n  { english: \"Current\", chinese: \"电流\" },\n  { english: \"Voltage\", chinese: \"电压\" },\n  { english: \"Ammeter\", chinese: \"电流表\" },\n  { english: \"Voltmeter\", chinese: \"电压表\" },\n  { english: \"Switch\", chinese: \"开关\" },\n  { english: \"Load\", chinese: \"负载\" },\n  { english: \"Resistance\", chinese: \"电阻\" },\n  { english: \"Conductor\", chinese: \"导体\" },\n  { english: \"Insulator\", chinese: \"绝缘体\" }\n];\n\n// 使用 Fisher-Yates 洗牌算法进行随机抽取\nconst shuffleArray = <T>(array: T[]): T[] => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\nexport const getRandomWords = (count: number = 8): WordPair[] => {\n  // 确保不要求超过可用单词数量\n  const safeCount = Math.min(count, allWords.length);\n  // 使用 Fisher-Yates 洗牌算法随机打乱并取前 count 个\n  return shuffleArray(allWords).slice(0, safeCount);\n}; "],"mappings":"AAKA;AACA,MAAO,MAAM,CAAAA,QAAoB,CAAG,CAClC,CAAEC,OAAO,CAAE,QAAQ,CAAEC,OAAO,CAAE,IAAK,CAAC,CACpC,CAAED,OAAO,CAAE,UAAU,CAAEC,OAAO,CAAE,IAAK,CAAC,CACtC,CAAED,OAAO,CAAE,SAAS,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC,CAAED,OAAO,CAAE,SAAS,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC,CAAED,OAAO,CAAE,SAAS,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC,CAAED,OAAO,CAAE,SAAS,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC,CAAED,OAAO,CAAE,SAAS,CAAEC,OAAO,CAAE,KAAM,CAAC,CACtC,CAAED,OAAO,CAAE,WAAW,CAAEC,OAAO,CAAE,KAAM,CAAC,CACxC,CAAED,OAAO,CAAE,QAAQ,CAAEC,OAAO,CAAE,IAAK,CAAC,CACpC,CAAED,OAAO,CAAE,MAAM,CAAEC,OAAO,CAAE,IAAK,CAAC,CAClC,CAAED,OAAO,CAAE,YAAY,CAAEC,OAAO,CAAE,IAAK,CAAC,CACxC,CAAED,OAAO,CAAE,WAAW,CAAEC,OAAO,CAAE,IAAK,CAAC,CACvC,CAAED,OAAO,CAAE,WAAW,CAAEC,OAAO,CAAE,KAAM,CAAC,CACzC,CAED;AACA,KAAM,CAAAC,YAAY,CAAOC,KAAU,EAAU,CAC3C,KAAM,CAAAC,QAAQ,CAAG,CAAC,GAAGD,KAAK,CAAC,CAC3B,IAAK,GAAI,CAAAE,CAAC,CAAGD,QAAQ,CAACE,MAAM,CAAG,CAAC,CAAED,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5C,KAAM,CAAAE,CAAC,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIL,CAAC,CAAG,CAAC,CAAC,CAAC,CAC7C,CAACD,QAAQ,CAACC,CAAC,CAAC,CAAED,QAAQ,CAACG,CAAC,CAAC,CAAC,CAAG,CAACH,QAAQ,CAACG,CAAC,CAAC,CAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC,CACzD,CACA,MAAO,CAAAD,QAAQ,CACjB,CAAC,CAED,MAAO,MAAM,CAAAO,cAAc,CAAG,QAAAA,CAAA,CAAmC,IAAlC,CAAAC,KAAa,CAAAC,SAAA,CAAAP,MAAA,IAAAO,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CAC9C;AACA,KAAM,CAAAE,SAAS,CAAGP,IAAI,CAACQ,GAAG,CAACJ,KAAK,CAAEb,QAAQ,CAACO,MAAM,CAAC,CAClD;AACA,MAAO,CAAAJ,YAAY,CAACH,QAAQ,CAAC,CAACkB,KAAK,CAAC,CAAC,CAAEF,SAAS,CAAC,CACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}