{"ast":null,"code":"// 定义所有可用的单词对\nexport const allWords = [{\n  english: \"Charge\",\n  chinese: \"电荷\"\n}, {\n  english: \"Electron\",\n  chinese: \"电子\"\n}, {\n  english: \"Battery\",\n  chinese: \"电池\"\n}, {\n  english: \"Circuit\",\n  chinese: \"电路\"\n}, {\n  english: \"Current\",\n  chinese: \"电流\"\n}, {\n  english: \"Voltage\",\n  chinese: \"电压\"\n}, {\n  english: \"Ammeter\",\n  chinese: \"电流表\"\n}, {\n  english: \"Voltmeter\",\n  chinese: \"电压表\"\n}, {\n  english: \"Switch\",\n  chinese: \"开关\"\n}, {\n  english: \"Load\",\n  chinese: \"负载\"\n}, {\n  english: \"Resistance\",\n  chinese: \"电阻\"\n}, {\n  english: \"Conductor\",\n  chinese: \"导体\"\n}, {\n  english: \"Insulator\",\n  chinese: \"绝缘体\"\n}];\n\n// 使用 Fisher-Yates 洗牌算法进行随机抽取\nconst shuffleArray = array => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\nexport const getRandomWords = (count = 8) => {\n  // 确保不要求超过可用单词数量\n  const safeCount = Math.min(count, allWords.length);\n  // 使用 Fisher-Yates 洗牌算法随机打乱并取前 count 个\n  return shuffleArray(allWords).slice(0, safeCount);\n};","map":{"version":3,"names":["allWords","english","chinese","shuffleArray","array","shuffled","i","length","j","Math","floor","random","getRandomWords","count","safeCount","min","slice"],"sources":["/Users/jz/Documents/resistance-begingame/memory-game/src/data/words.ts"],"sourcesContent":["export interface WordPair {\n  english: string;\n  chinese: string;\n}\n\n// 定义所有可用的单词对\nexport const allWords: WordPair[] = [\n  { english: \"Charge\", chinese: \"电荷\" },\n  { english: \"Electron\", chinese: \"电子\" },\n  { english: \"Battery\", chinese: \"电池\" },\n  { english: \"Circuit\", chinese: \"电路\" },\n  { english: \"Current\", chinese: \"电流\" },\n  { english: \"Voltage\", chinese: \"电压\" },\n  { english: \"Ammeter\", chinese: \"电流表\" },\n  { english: \"Voltmeter\", chinese: \"电压表\" },\n  { english: \"Switch\", chinese: \"开关\" },\n  { english: \"Load\", chinese: \"负载\" },\n  { english: \"Resistance\", chinese: \"电阻\" },\n  { english: \"Conductor\", chinese: \"导体\" },\n  { english: \"Insulator\", chinese: \"绝缘体\" }\n];\n\n// 使用 Fisher-Yates 洗牌算法进行随机抽取\nconst shuffleArray = <T>(array: T[]): T[] => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\nexport const getRandomWords = (count: number = 8): WordPair[] => {\n  // 确保不要求超过可用单词数量\n  const safeCount = Math.min(count, allWords.length);\n  // 使用 Fisher-Yates 洗牌算法随机打乱并取前 count 个\n  return shuffleArray(allWords).slice(0, safeCount);\n}; "],"mappings":"AAKA;AACA,OAAO,MAAMA,QAAoB,GAAG,CAClC;EAAEC,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,OAAO,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAK,CAAC,EACtC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAM,CAAC,EACtC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAM,CAAC,EACxC;EAAED,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,OAAO,EAAE,MAAM;EAAEC,OAAO,EAAE;AAAK,CAAC,EAClC;EAAED,OAAO,EAAE,YAAY;EAAEC,OAAO,EAAE;AAAK,CAAC,EACxC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAK,CAAC,EACvC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAM,CAAC,CACzC;;AAED;AACA,MAAMC,YAAY,GAAOC,KAAU,IAAU;EAC3C,MAAMC,QAAQ,GAAG,CAAC,GAAGD,KAAK,CAAC;EAC3B,KAAK,IAAIE,CAAC,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,QAAQ,CAACC,CAAC,CAAC,EAAED,QAAQ,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,QAAQ,CAACG,CAAC,CAAC,EAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC;EACzD;EACA,OAAOD,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMO,cAAc,GAAGA,CAACC,KAAa,GAAG,CAAC,KAAiB;EAC/D;EACA,MAAMC,SAAS,GAAGL,IAAI,CAACM,GAAG,CAACF,KAAK,EAAEb,QAAQ,CAACO,MAAM,CAAC;EAClD;EACA,OAAOJ,YAAY,CAACH,QAAQ,CAAC,CAACgB,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC;AACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}