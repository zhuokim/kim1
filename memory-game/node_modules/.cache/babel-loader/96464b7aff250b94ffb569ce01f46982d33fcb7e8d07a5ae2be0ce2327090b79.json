{"ast":null,"code":"export const allWords = [{\n  english: \"Charge\",\n  chinese: \"电荷\"\n}, {\n  english: \"Electron\",\n  chinese: \"电子\"\n}, {\n  english: \"Battery\",\n  chinese: \"电池\"\n}, {\n  english: \"Circuit\",\n  chinese: \"电路\"\n}, {\n  english: \"Current\",\n  chinese: \"电流\"\n}, {\n  english: \"Voltage\",\n  chinese: \"电压\"\n}, {\n  english: \"Ammeter\",\n  chinese: \"电流表\"\n}, {\n  english: \"Voltmeter\",\n  chinese: \"电压表\"\n}, {\n  english: \"Switch\",\n  chinese: \"开关\"\n}, {\n  english: \"Load\",\n  chinese: \"负载\"\n}, {\n  english: \"Resistance\",\n  chinese: \"电阻\"\n}, {\n  english: \"Conductor\",\n  chinese: \"导体\"\n}, {\n  english: \"Insulator\",\n  chinese: \"绝缘体\"\n}, {\n  english: \"Electron\",\n  chinese: \"电子\"\n}];\nexport const getRandomWords = (count = 12) => {\n  const shuffled = [...allWords].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};","map":{"version":3,"names":["allWords","english","chinese","getRandomWords","count","shuffled","sort","Math","random","slice"],"sources":["/Users/jz/Documents/resistance-begingame/memory-game/src/data/words.ts"],"sourcesContent":["export interface WordPair {\n  english: string;\n  chinese: string;\n}\n\nexport const allWords: WordPair[] = [\n  { english: \"Charge\", chinese: \"电荷\" },\n  { english: \"Electron\", chinese: \"电子\" },\n  { english: \"Battery\", chinese: \"电池\" },\n  { english: \"Circuit\", chinese: \"电路\" },\n  { english: \"Current\", chinese: \"电流\" },\n  { english: \"Voltage\", chinese: \"电压\" },\n  { english: \"Ammeter\", chinese: \"电流表\" },\n  { english: \"Voltmeter\", chinese: \"电压表\" },\n  { english: \"Switch\", chinese: \"开关\" },\n  { english: \"Load\", chinese: \"负载\" },\n  { english: \"Resistance\", chinese: \"电阻\" },\n  { english: \"Conductor\", chinese: \"导体\" },\n  { english: \"Insulator\", chinese: \"绝缘体\" },\n  { english: \"Electron\", chinese: \"电子\" }\n];\n\nexport const getRandomWords = (count: number = 12): WordPair[] => {\n  const shuffled = [...allWords].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n}; "],"mappings":"AAKA,OAAO,MAAMA,QAAoB,GAAG,CAClC;EAAEC,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,OAAO,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAK,CAAC,EACtC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,OAAO,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAM,CAAC,EACtC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAM,CAAC,EACxC;EAAED,OAAO,EAAE,QAAQ;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,OAAO,EAAE,MAAM;EAAEC,OAAO,EAAE;AAAK,CAAC,EAClC;EAAED,OAAO,EAAE,YAAY;EAAEC,OAAO,EAAE;AAAK,CAAC,EACxC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAK,CAAC,EACvC;EAAED,OAAO,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAM,CAAC,EACxC;EAAED,OAAO,EAAE,UAAU;EAAEC,OAAO,EAAE;AAAK,CAAC,CACvC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAa,GAAG,EAAE,KAAiB;EAChE,MAAMC,QAAQ,GAAG,CAAC,GAAGL,QAAQ,CAAC,CAACM,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EAC9D,OAAOH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEL,KAAK,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}