{"ast":null,"code":"var _jsxFileName = \"/Users/jz/Documents/resistance-begingame/memory-game/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getRandomWords } from '../data/words';\nimport Card from './Card';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PREVIEW_DURATION = 10; // Preview duration in seconds\n\nconst Game = ({\n  group,\n  onComplete\n}) => {\n  _s();\n  const [gameState, setGameState] = useState({\n    cards: [],\n    flippedCards: [],\n    isGameComplete: false,\n    startTime: null,\n    endTime: null\n  });\n  const [isPreview, setIsPreview] = useState(true);\n  const [previewCountdown, setPreviewCountdown] = useState(PREVIEW_DURATION);\n  const initializeGame = () => {\n    const selectedWords = getRandomWords(8);\n    const cards = [];\n\n    // Create a pair of cards for each word (English and Chinese)\n    selectedWords.forEach((word, index) => {\n      // English card\n      cards.push({\n        id: index * 2,\n        content: word.english,\n        type: 'english',\n        pairId: index,\n        isFlipped: true,\n        isMatched: false\n      });\n      // Chinese card\n      cards.push({\n        id: index * 2 + 1,\n        content: word.chinese,\n        type: 'chinese',\n        pairId: index,\n        isFlipped: true,\n        isMatched: false\n      });\n    });\n\n    // Shuffle cards\n    const shuffledCards = cards.sort(() => Math.random() - 0.5);\n    setGameState({\n      cards: shuffledCards,\n      flippedCards: [],\n      isGameComplete: false,\n      startTime: null,\n      endTime: null\n    });\n    setIsPreview(true);\n    setPreviewCountdown(PREVIEW_DURATION);\n  };\n  useEffect(() => {\n    if (isPreview && previewCountdown > 0) {\n      const timer = setInterval(() => {\n        setPreviewCountdown(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n    if (isPreview && previewCountdown === 0) {\n      setIsPreview(false);\n      setGameState(prev => ({\n        ...prev,\n        cards: prev.cards.map(card => ({\n          ...card,\n          isFlipped: false\n        })),\n        startTime: Date.now()\n      }));\n    }\n  }, [isPreview, previewCountdown]);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  const handleCardClick = clickedCard => {\n    if (isPreview || gameState.flippedCards.length === 2 || clickedCard.isFlipped || clickedCard.isMatched) {\n      return;\n    }\n    const newCards = gameState.cards.map(card => card.id === clickedCard.id ? {\n      ...card,\n      isFlipped: true\n    } : card);\n    const newFlippedCards = [...gameState.flippedCards, clickedCard];\n    setGameState(prev => ({\n      ...prev,\n      cards: newCards,\n      flippedCards: newFlippedCards\n    }));\n    if (newFlippedCards.length === 2) {\n      const [firstCard, secondCard] = newFlippedCards;\n      const isMatch = firstCard.pairId === secondCard.pairId && firstCard.type !== secondCard.type;\n      if (isMatch) {\n        const matchedCards = newCards.map(card => card.id === firstCard.id || card.id === secondCard.id ? {\n          ...card,\n          isMatched: true\n        } : card);\n        const isGameComplete = matchedCards.every(card => card.isMatched);\n        const endTime = isGameComplete ? Date.now() : null;\n        setGameState(prev => ({\n          ...prev,\n          cards: matchedCards,\n          flippedCards: [],\n          isGameComplete,\n          endTime\n        }));\n        if (isGameComplete && endTime && gameState.startTime) {\n          const timeTaken = Math.floor((endTime - gameState.startTime) / 1000);\n          onComplete(timeTaken);\n        }\n      } else {\n        setTimeout(() => {\n          const resetCards = newCards.map(card => card.id === firstCard.id || card.id === secondCard.id ? {\n            ...card,\n            isFlipped: false\n          } : card);\n          setGameState(prev => ({\n            ...prev,\n            cards: resetCards,\n            flippedCards: []\n          }));\n        }, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-b from-gray-100 to-gray-200 py-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-4\",\n          children: [!isPreview && /*#__PURE__*/_jsxDEV(Timer, {\n            startTime: gameState.startTime,\n            endTime: gameState.endTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-lg font-semibold text-blue-600\",\n            children: [\"Group \", group]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), isPreview ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-2xl font-bold text-blue-600\",\n          children: [\"Preview: \", previewCountdown, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-4 gap-4\",\n        children: gameState.cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n          card: card,\n          onClick: () => handleCardClick(card)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"hfkFFkg5uc+PuzlE0EVpUIyLw6E=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","getRandomWords","Card","Timer","jsxDEV","_jsxDEV","PREVIEW_DURATION","Game","group","onComplete","_s","gameState","setGameState","cards","flippedCards","isGameComplete","startTime","endTime","isPreview","setIsPreview","previewCountdown","setPreviewCountdown","initializeGame","selectedWords","forEach","word","index","push","id","content","english","type","pairId","isFlipped","isMatched","chinese","shuffledCards","sort","Math","random","timer","setInterval","prev","clearInterval","map","card","Date","now","handleCardClick","clickedCard","length","newCards","newFlippedCards","firstCard","secondCard","isMatch","matchedCards","every","timeTaken","floor","setTimeout","resetCards","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jz/Documents/resistance-begingame/memory-game/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getRandomWords } from '../data/words';\nimport { Card as CardType, GameState } from '../types';\nimport Card from './Card';\nimport Timer from './Timer';\n\nconst PREVIEW_DURATION = 10; // Preview duration in seconds\n\ninterface GameProps {\n  group: number;\n  onComplete: (time: number) => void;\n}\n\nconst Game: React.FC<GameProps> = ({ group, onComplete }) => {\n  const [gameState, setGameState] = useState<GameState>({\n    cards: [],\n    flippedCards: [],\n    isGameComplete: false,\n    startTime: null,\n    endTime: null,\n  });\n\n  const [isPreview, setIsPreview] = useState(true);\n  const [previewCountdown, setPreviewCountdown] = useState(PREVIEW_DURATION);\n\n  const initializeGame = () => {\n    const selectedWords = getRandomWords(8);\n    const cards: CardType[] = [];\n\n    // Create a pair of cards for each word (English and Chinese)\n    selectedWords.forEach((word, index) => {\n      // English card\n      cards.push({\n        id: index * 2,\n        content: word.english,\n        type: 'english',\n        pairId: index,\n        isFlipped: true,\n        isMatched: false,\n      });\n      // Chinese card\n      cards.push({\n        id: index * 2 + 1,\n        content: word.chinese,\n        type: 'chinese',\n        pairId: index,\n        isFlipped: true,\n        isMatched: false,\n      });\n    });\n\n    // Shuffle cards\n    const shuffledCards = cards.sort(() => Math.random() - 0.5);\n\n    setGameState({\n      cards: shuffledCards,\n      flippedCards: [],\n      isGameComplete: false,\n      startTime: null,\n      endTime: null,\n    });\n    setIsPreview(true);\n    setPreviewCountdown(PREVIEW_DURATION);\n  };\n\n  useEffect(() => {\n    if (isPreview && previewCountdown > 0) {\n      const timer = setInterval(() => {\n        setPreviewCountdown(prev => prev - 1);\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n\n    if (isPreview && previewCountdown === 0) {\n      setIsPreview(false);\n      setGameState(prev => ({\n        ...prev,\n        cards: prev.cards.map(card => ({ ...card, isFlipped: false })),\n        startTime: Date.now(),\n      }));\n    }\n  }, [isPreview, previewCountdown]);\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  const handleCardClick = (clickedCard: CardType) => {\n    if (\n      isPreview ||\n      gameState.flippedCards.length === 2 ||\n      clickedCard.isFlipped ||\n      clickedCard.isMatched\n    ) {\n      return;\n    }\n\n    const newCards = gameState.cards.map((card) =>\n      card.id === clickedCard.id ? { ...card, isFlipped: true } : card\n    );\n\n    const newFlippedCards = [...gameState.flippedCards, clickedCard];\n\n    setGameState((prev) => ({\n      ...prev,\n      cards: newCards,\n      flippedCards: newFlippedCards,\n    }));\n\n    if (newFlippedCards.length === 2) {\n      const [firstCard, secondCard] = newFlippedCards;\n      const isMatch = firstCard.pairId === secondCard.pairId && \n                     firstCard.type !== secondCard.type;\n\n      if (isMatch) {\n        const matchedCards = newCards.map((card) =>\n          card.id === firstCard.id || card.id === secondCard.id\n            ? { ...card, isMatched: true }\n            : card\n        );\n\n        const isGameComplete = matchedCards.every((card) => card.isMatched);\n        const endTime = isGameComplete ? Date.now() : null;\n\n        setGameState((prev) => ({\n          ...prev,\n          cards: matchedCards,\n          flippedCards: [],\n          isGameComplete,\n          endTime,\n        }));\n\n        if (isGameComplete && endTime && gameState.startTime) {\n          const timeTaken = Math.floor((endTime - gameState.startTime) / 1000);\n          onComplete(timeTaken);\n        }\n      } else {\n        setTimeout(() => {\n          const resetCards = newCards.map((card) =>\n            card.id === firstCard.id || card.id === secondCard.id\n              ? { ...card, isFlipped: false }\n              : card\n          );\n\n          setGameState((prev) => ({\n            ...prev,\n            cards: resetCards,\n            flippedCards: [],\n          }));\n        }, 1000);\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-100 to-gray-200 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div className=\"flex items-center gap-4\">\n            {!isPreview && (\n              <Timer\n                startTime={gameState.startTime}\n                endTime={gameState.endTime}\n              />\n            )}\n            <div className=\"text-lg font-semibold text-blue-600\">\n              Group {group}\n            </div>\n          </div>\n          {isPreview ? (\n            <div className=\"text-2xl font-bold text-blue-600\">\n              Preview: {previewCountdown}s\n            </div>\n          ) : null}\n        </div>\n\n        <div className=\"grid grid-cols-4 gap-4\">\n          {gameState.cards.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              onClick={() => handleCardClick(card)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}